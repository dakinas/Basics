# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе инициализировать
# параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы перегрузки арифметических
# операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны
# применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
# двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек
# этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод
# позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, parts):
        self.parts = parts

    def __str__(self):
        return f"{self.parts}"

    def __add__(self, other):
        print("Сумма клеток: ")
        return Cell(self.parts + other.parts)

    def __sub__(self, other):
        print("Вычитание клеток: ")
        return Cell(self.parts - other.parts) if self.parts - other.parts > 0 else "Ячеек в первой клетке меньше, чем во второй"

    def __mul__(self, other):
        print("Умножение клеток: ")
        return Cell(self.parts * other.parts)

    def __floordiv__(self, other):
        print("Деление клеток: ")
        return Cell(self.parts // other.parts)

    def make_order(self, rows):
        return "\n".join(["*" * rows for _ in range(self.parts // rows)]) + "\n" + "*" * (self.parts % rows)

cell_1 = Cell(55)
cell_2 = Cell(30)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)
print(cell_1.make_order(10))
print(cell_2.make_order(5))